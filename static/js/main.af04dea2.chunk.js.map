{"version":3,"sources":["App.js","index.js"],"names":["App","useState","tronAddress","setTronAddress","blockChainName","setBlockChainName","ethereumAddress","setEthereumAddress","solanaAddress","setSolanaAddress","Box","p","display","flexDirection","alignItems","m","Button","style","margin","variant","color","onClick","window","tronWeb","defaultAddress","base58","ethereum","request","method","selectedAddress","chainId","solana","connect","on","console","log","publicKey","toString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAuEeA,MApEf,WACE,MAAoCC,mBAAS,IAA7C,mBAAKC,EAAL,KAAkBC,EAAlB,KACA,EAA0CF,mBAAS,IAAnD,mBAAKG,EAAL,KAAqBC,EAArB,KACA,EAA4CJ,mBAAS,IAArD,mBAAKK,EAAL,KAAsBC,EAAtB,KACA,EAAwCN,mBAAS,IAAjD,mBAAKO,EAAL,KAAoBC,EAApB,KAgDE,OACE,eAACC,EAAA,EAAD,CAAKC,EAAG,EAAIC,QAAQ,OAAOC,cAAc,SAASC,WAAW,SAA7D,UACE,eAACJ,EAAA,EAAD,CAAKK,EAAG,EAAR,UACE,cAACC,EAAA,EAAD,CAAQC,MAAO,CAACC,OAAO,OAASC,QAAQ,YAAYC,MAAM,UAAUC,QAjD5E,WACMC,OAAOC,SAAWD,OAAOC,QAAQC,eAAeC,SAClDvB,EAAcoB,OAAOC,QAAQC,eAAeC,OAC5CtB,EAAeD,KA8CX,iCACA,cAACc,EAAA,EAAD,CAAQC,MAAO,CAACC,OAAO,OAAQC,QAAQ,YAAYC,MAAM,UAAUC,QA3C3E,WACE,GAAGC,OAAOI,SAAS,CACjBJ,OAAOI,SAASC,QAAQ,CAAEC,OAAQ,wBAClCtB,EAAkBgB,OAAOI,SAASG,gBAClCtB,EAAmBD,GACnB,IAAIwB,EAAUR,OAAOI,SAASI,QACf,YAAZA,EAEDzB,EADAD,EAAiB,iBAGC,SAAZ0B,EAENzB,EADAD,EAAiB,WAGC,QAAZ0B,EAENzB,EADAD,EAAiB,qBAGC,QAAZ0B,EAENzB,EADAD,EAAiB,oBAGC,QAAZ0B,GAENzB,EADAD,EAAiB,sBAoBf,iCACA,cAACY,EAAA,EAAD,CAAQC,MAAO,CAACC,OAAO,OAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAf3E,WACEC,OAAOS,OAAOC,UACdV,OAAOS,OAAOJ,QAAQ,CAAEC,OAAQ,YAChCN,OAAOS,OAAOE,GAAG,WAAW,kBAAMC,QAAQC,IAAI,iBAChB,MAA3Bb,OAAOS,OAAOK,YAEf5B,EAAgBc,OAAOS,OAAOK,UAAUC,WACxC5B,EAAiBD,KAQb,kCAEF,eAACE,EAAA,EAAD,WACE,iDAAoBR,KACpB,oDAAuBE,EAAvB,MAA0CE,KAC1C,mDAAsBE,YC5DhC8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.af04dea2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Box, Button } from '@material-ui/core';\n\nfunction App() {\n  let [tronAddress, setTronAddress] = useState(\"\");\n  let [blockChainName, setBlockChainName] = useState(\"\");\n  let [ethereumAddress, setEthereumAddress] = useState(\"\");\n  let [solanaAddress, setSolanaAddress] = useState(\"\");\n\n  function gettronweb() {\n    if (window.tronWeb && window.tronWeb.defaultAddress.base58) {\n      tronAddress = window.tronWeb.defaultAddress.base58;\n      setTronAddress(tronAddress);\n    }\n  }\n\n  function getethereumweb() {\n    if(window.ethereum){\n      window.ethereum.request({ method: 'eth_requestAccounts' });\n      ethereumAddress = window.ethereum.selectedAddress;\n      setEthereumAddress(ethereumAddress);\n      let chainId = window.ethereum.chainId;\n      if(chainId === \"0x13881\"){\n        blockChainName = \"Polygon Matic\";\n        setBlockChainName(blockChainName);\n      }\n      else if(chainId === \"0x61\"){\n        blockChainName = \"Binance\";\n        setBlockChainName(blockChainName);\n      }\n      else if(chainId === \"0x1\"){\n        blockChainName = \"Ethereum Main Net\";\n        setBlockChainName(blockChainName);\n      }\n      else if(chainId === \"0x3\"){\n        blockChainName = \"Ropsten Test Net\";\n        setBlockChainName(blockChainName);\n      }\n      else if(chainId === \"0x4\"){\n        blockChainName = \"Rinkeby Test Net\";\n        setBlockChainName(blockChainName);\n      }\n    }\n  }\n\n  function getsolanaweb(){\n    window.solana.connect();\n    window.solana.request({ method: \"connect\" })\n    window.solana.on(\"connect\", () => console.log(\"connected!\"))\n    if(window.solana.publicKey != null)\n    {\n      solanaAddress = window.solana.publicKey.toString();\n      setSolanaAddress(solanaAddress);\n    }\n  }\n    return (\n      <Box p={3}  display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n        <Box m={4}>\n          <Button style={{margin:\"4px\"}}  variant=\"contained\" color=\"primary\" onClick={gettronweb}>Connect to TronLink</Button>\n          <Button style={{margin:\"4px\"}} variant=\"contained\" color=\"primary\" onClick={getethereumweb}>Connect to MetaMask</Button>\n          <Button style={{margin:\"4px\"}} variant=\"contained\" color=\"primary\" onClick={getsolanaweb}>Connect to Solana</Button>\n        </Box>\n        <Box>\n          <h3> Tron Address: {tronAddress}</h3>\n          <h3> MetaMask Address({blockChainName}): {ethereumAddress}</h3>\n          <h3> Solana Address: {solanaAddress}</h3>\n        </Box>\n      </Box>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}